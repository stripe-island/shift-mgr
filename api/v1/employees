#! /usr/bin/perl

use strict;
use warnings;

use CGI;
use DateTime;
use DBI;
use JSON::PP;
use Switch;

my $cgi = new CGI;


if ($ENV{"REQUEST_METHOD"} eq "OPTIONS")
{
	print $cgi->header(
		-access_control_allow_origin => "*",
		-access_control_allow_headers => "Authorization",
		-status => "204 No Content"
	);
	exit(0);
}


if($ENV{"HTTP_AUTHORIZATION"} eq "")
{
	print $cgi->header(
		-access_control_allow_origin => "*",
		-status => "401 Unauthorized",
		-www_authenticate => "Bearer realm=\"\""
	);
}
elsif($ENV{"HTTP_AUTHORIZATION"} =~ /^Bearer ([0-9]+)\/(.+)$/)
{
	my $dbh = DBI->connect(
		"DBI:mysql:database=shift_mgr;host=localhost;mysql_server_prepare=1",
		"xxxx",
		"xxxxxxxxxxxxxxxx",
		{AutoCommit => 1, PrintError => 0, RaiseError => 1}
	);
	my $sth;
	my $user;

	$sth = $dbh->prepare("SELECT * FROM employees WHERE number = ?;");
	$sth->execute($1);
	eval
	{
		$user = $sth->fetchrow_hashref() or die;
		$user->{"resigned"} == 0 or die;
		$user->{"password"} =~ /^\Q$2\E$/i or die;
	};
	if($@)
	{
		print $cgi->header(
			-access_control_allow_origin => "*",
			-status => "401 Unauthorized",
			-www_authenticate => "Bearer error=\"invalid_token\""
		);
		exit;
	}

	switch($ENV{"REQUEST_METHOD"})
	{
		case "GET"
		{
			if($ENV{"PATH_INFO"} =~ /^\/([0-9]{1,4})\/shifts$/)
			{
				my $dt = DateTime->now(time_zone => "local");
				my $since = $dt->ymd("");
				if($cgi->param("since") ne "")
				{
					$since = $cgi->param("since");
				}
				$dt->add(days => 6);
				my $until = $dt->ymd("");
				if($cgi->param("until") ne "")
				{
					$until = $cgi->param("until");
				}
				my $response = {};
				my $shift;

				$sth = $dbh->prepare(
					"SELECT date, start, end FROM shifts "
				   ."WHERE employee_number = ? AND date >= ? AND date <= ? "
				   ."ORDER BY date;"
				);
				$sth->execute($1, $since, $until);
				$response->{"shifts"} = [];
				while($shift = $sth->fetchrow_hashref())
				{
					push(@{$response->{"shifts"}}, $shift);
				}

				print $cgi->header(
					-access_control_allow_origin => "*",
					-status => "200 OK",
					-type => "application/json; charset=utf-8",
					-x_content_type_options => "nosniff"
				);
				print encode_json($response);
			}
			else
			{
				print $cgi->header(
					-access_control_allow_origin => "*",
					-status => "400 Bad Request"
				);
			}
		}
		case "POST"
		{
			if($user->{"recruit"})
			{
				my $employee;
				eval
				{
					$employee = decode_json($cgi->param("POSTDATA")) or die;
					$employee->{"number"} =~ /^[0-9]{1,4}$/ or die;
					$employee->{"name"} =~ s/\s+//g;
					$employee->{"name"} ne "" or die;
					length($employee->{"name"}) < 256 or die;
				};
				if($@)
				{
					print $cgi->header(
						-access_control_allow_origin => "*",
						-status => "400 Bad Request"
					);
					exit;
				}
				$employee->{"password"} = join("", map{(("a".."z"), (0..9))[rand(36)]}(1..8));

				$sth = $dbh->prepare("INSERT INTO employees(number, name, password) VALUES(?, ?, ?);");
				eval
				{
					$sth->execute($employee->{"number"}, $employee->{"name"}, $employee->{"password"});
				};
				if($@)
				{
					print $cgi->header(
						-access_control_allow_origin => "*",
						-status => "409 Conflict"
					);
					exit;
				}

				print $cgi->header(
					-access_control_allow_origin => "*",
					-status => "201 Created",
					-type => "application/json; charset=utf-8",
					-x_content_type_options => "nosniff"
				);
				print encode_json($employee);
			}
			else
			{
				print $cgi->header(
					-access_control_allow_origin => "*",
					-status => "403 Forbidden"
				);
			}
		}
		else
		{
			print $cgi->header(
				-access_control_allow_origin => "*",
				-status => "405 Method Not Allowed"
			);
		}
	}
}
else
{
	print $cgi->header(
		-access_control_allow_origin => "*",
		-status => "400 Bad Request",
		-www_authenticate => "Bearer error=\"invalid_request\""
	);
}
